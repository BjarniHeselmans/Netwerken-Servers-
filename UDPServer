/*
set Path=C:\MinGW\bin;%PATH%
gcc UDP.c -o net.exe -l ws2_32
*/

#ifdef _WIN32
    #define _WIN32_WINNT _WIN32_WINNT_WIN7
    #include <winsock2.h> //for all socket programming
    #include <ws2tcpip.h> //for getaddrinfo, inet_pton, inet_ntop
    #include <stdio.h> //for fprintf, perror
    #include <unistd.h> //for close
    #include <stdlib.h> //for exit
    #include <string.h> //for memset
    void OSInit( void )
    {
        WSADATA wsaData;
        int WSAError = WSAStartup( MAKEWORD( 2, 0 ), &wsaData ); 
        if( WSAError != 0 )
        {
            fprintf( stderr, "WSAStartup errno = %d\n", WSAError );
            exit( -1 );
        }
    }
    void OSCleanup( void )
    {
        WSACleanup();
    }
    #define perror(string) fprintf( stderr, string ": WSA errno = %d\n", WSAGetLastError() )
#else
    #include <sys/socket.h> //for sockaddr, socket, socket
    #include <sys/types.h> //for size_t
    #include <netdb.h> //for getaddrinfo
    #include <netinet/in.h> //for sockaddr_in
    #include <arpa/inet.h> //for htons, htonl, inet_pton, inet_ntop
    #include <errno.h> //for errno
    #include <stdio.h> //for fprintf, perror
    #include <unistd.h> //for close
    #include <stdlib.h> //for exit
    #include <string.h> //for memset
    int OSInit( void ) {}
    int OSCleanup( void ) {}
#endif

#include <time.h> // for time
#include <stdbool.h> // for bool, true, false

#define TIMEOUT_INITIAL 16 // Initial timeout value in seconds
#define TIMEOUT_MULTIPLIER 0.5 // Multiplier for dynamic timeout

int initialization();
void execution( int internet_socket );
void cleanup( int internet_socket );
bool check_guess(int guess);

int main( int argc, char * argv[] )
{
    //////////////////
    //Initialization//
    //////////////////

    OSInit();

    int internet_socket = initialization();

    /////////////////
    //Execution//
    /////////////////

    int random_number = rand() % 100; // Generates a random number between 0 and 99
    printf("Randomnummer = %d", random_number);

    execution( internet_socket,random_number );


    ////////////
    //Clean up//
    ////////////

    cleanup( internet_socket );

    OSCleanup();

    return 0;
}

int initialization()
{
    //Step 1.1
    struct addrinfo internet_address_setup;
    struct addrinfo * internet_address_result;
    memset( &internet_address_setup, 0, sizeof internet_address_setup );
    internet_address_setup.ai_family = AF_UNSPEC;
    internet_address_setup.ai_socktype = SOCK_DGRAM;
    internet_address_setup.ai_flags = AI_PASSIVE;
    int getaddrinfo_return = getaddrinfo( NULL, "24042", &internet_address_setup, &internet_address_result );
    if( getaddrinfo_return != 0 )
    {
        fprintf( stderr, "getaddrinfo: %s\n", gai_strerror( getaddrinfo_return ) );
        exit( 1 );
    }

    int internet_socket = -1;
    struct addrinfo * internet_address_result_iterator = internet_address_result;
    while( internet_address_result_iterator != NULL )
    {
        //Step 1.2
        internet_socket = socket( internet_address_result_iterator->ai_family, internet_address_result_iterator->ai_socktype, internet_address_result_iterator->ai_protocol );
        if( internet_socket == -1 )
        {
            perror( "socket" );
        }
        else
        {
            //Step 1.3
            int bind_return = bind( internet_socket, internet_address_result_iterator->ai_addr, internet_address_result_iterator->ai_addrlen );
            if( bind_return == -1 )
            {
                close( internet_socket );
                perror( "bind" );
            }
            else
            {
                break;
            }
        }
        internet_address_result_iterator = internet_address_result_iterator->ai_next;
    }

    freeaddrinfo( internet_address_result );

    if( internet_socket == -1 )
    {
        fprintf( stderr, "socket: no valid socket address found\n" );
        exit( 2 );
    }

    return internet_socket;
}

void execution( int internet_socket )
{
    int initial_timeout = TIMEOUT_INITIAL;
    bool winner_selected = false;

    while (!winner_selected) {
        // Calculate dynamic timeout based on the number of guesses
        int timeout = initial_timeout;

        // Set timeout for receiving data
        struct timeval tv;
        tv.tv_sec = timeout;
        tv.tv_usec = 0;
        setsockopt(internet_socket, SOL_SOCKET, SO_RCVTIMEO, (const char*)&tv, sizeof(tv));

        int number_of_bytes_received = 0;
        char buffer[1000];
        struct sockaddr_storage client_internet_address;
        socklen_t client_internet_address_length = sizeof client_internet_address;
        number_of_bytes_received = recvfrom( internet_socket, buffer, ( sizeof buffer ) - 1, 0, (struct sockaddr *) &client_internet_address, &client_internet_address_length );
        if( number_of_bytes_received == -1 )
        {
            // Optionally, you can decrease the initial timeout here
            initial_timeout *= TIMEOUT_MULTIPLIER;
            if (initial_timeout < 1) {
                initial_timeout = 1; // Minimum timeout value to avoid infinite loop
            }
                // Late message handling for all clients
                int number_of_bytes_send = 0;
                number_of_bytes_send = sendto( internet_socket, "You lost!", 10, 0, (struct sockaddr *) &client_internet_address, client_internet_address_length );
                if( number_of_bytes_send == -1 )
                {
                    perror( "sendto" );
                }
        }
        else
        {
            // Handle received data
            buffer[number_of_bytes_received] = '\0';
            printf( "Received : %s\n", buffer );

            int received_guess = atoi(buffer);
            if (check_guess(received_guess)) {
                // Correct guess handling
                int number_of_bytes_send = 0;
                number_of_bytes_send = sendto( internet_socket, "You Won?", 9, 0, (struct sockaddr *) &client_internet_address, client_internet_address_length );
                if( number_of_bytes_send == -1 )
                {
                    perror( "sendto" );
                }
                winner_selected = true;
            } else {
                // Incorrect guess handling
                int number_of_bytes_send = 0;
                number_of_bytes_send = sendto( internet_socket, "You lost?", 10, 0, (struct sockaddr *) &client_internet_address, client_internet_address_length );
                if( number_of_bytes_send == -1 )
                {
                    perror( "sendto" );
                }
            }
        }
    }
}

bool check_guess(int guess) {
    // Compare the guess with the randomly generated number
    return guess == random_number;
}

void cleanup( int internet_socket )
{
    //Step 3.1
    close( internet_socket );
}
