/*
set Path=C:\MinGW\bin;%PATH%
gcc TCP.c -o net2.exe -l ws2_32
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#ifdef _WIN32
	#define _WIN32_WINNT _WIN32_WINNT_WIN7
	#include <winsock2.h> //for all socket programming
	#include <ws2tcpip.h> //for getaddrinfo, inet_pton, inet_ntop
	#include <stdio.h> //for fprintf, perror
	#include <unistd.h> //for close
	#include <stdlib.h> //for exit
	#include <string.h> //for memset
	void OSInit( void )
	{
		WSADATA wsaData;
		int WSAError = WSAStartup( MAKEWORD( 2, 0 ), &wsaData ); 
		if( WSAError != 0 )
		{
			fprintf( stderr, "WSAStartup errno = %d\n", WSAError );
			exit( -1 );
		}
	}
	void OSCleanup( void )
	{
		WSACleanup();
	}
	#define perror(string) fprintf( stderr, string ": WSA errno = %d\n", WSAGetLastError() )
#else
	#include <sys/socket.h> //for sockaddr, socket, socket
	#include <sys/types.h> //for size_t
	#include <netdb.h> //for getaddrinfo
	#include <netinet/in.h> //for sockaddr_in
	#include <arpa/inet.h> //for htons, htonl, inet_pton, inet_ntop
	#include <errno.h> //for errno
	#include <stdio.h> //for fprintf, perror
	#include <unistd.h> //for close
	#include <stdlib.h> //for exit
	#include <string.h> //for memset
	void OSInit( void ) {}
	void OSCleanup( void ) {}
#endif

void OSInit(void);
void OSCleanup(void);
int initialization(void);
int connection(int internet_socket);
void execution(int client_internet_socket, int number_to_guess);
void cleanup(int internet_socket, int client_internet_socket);
int generateRandomNumber(int min, int max);

int main(int argc, char *argv[])
{
    OSInit();

    int internet_socket = initialization();

    int client_internet_socket = connection(internet_socket);

    // Generate a random number between 1 and 1000000
    int number_to_guess = generateRandomNumber(1, 1000000);

    execution(client_internet_socket, number_to_guess);

    cleanup(internet_socket, client_internet_socket);

    OSCleanup();

    return 0;
}

int initialization(void)
{
    struct addrinfo internet_address_setup;
    struct addrinfo *internet_address_result;
    memset(&internet_address_setup, 0, sizeof internet_address_setup);
    internet_address_setup.ai_family = AF_UNSPEC;
    internet_address_setup.ai_socktype = SOCK_STREAM;
    internet_address_setup.ai_flags = AI_PASSIVE;
    int getaddrinfo_return = getaddrinfo(NULL, "24042", &internet_address_setup, &internet_address_result);
    if (getaddrinfo_return != 0)
    {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(getaddrinfo_return));
        exit(1);
    }

    int internet_socket = -1;
    struct addrinfo *internet_address_result_iterator = internet_address_result;
    while (internet_address_result_iterator != NULL)
    {
        internet_socket = socket(internet_address_result_iterator->ai_family, internet_address_result_iterator->ai_socktype, internet_address_result_iterator->ai_protocol);
        if (internet_socket == -1)
        {
            perror("socket");
        }
        else
        {
            int bind_return = bind(internet_socket, internet_address_result_iterator->ai_addr, internet_address_result_iterator->ai_addrlen);
            if (bind_return == -1)
            {
                perror("bind");
                #ifdef _WIN32
                    closesocket(internet_socket);
                #else
                    close(internet_socket);
                #endif
            }
            else
            {
                int listen_return = listen(internet_socket, 1);
                if (listen_return == -1)
                {
                    #ifdef _WIN32
                        closesocket(internet_socket);
                    #else
                        close(internet_socket);
                    #endif
                    perror("listen");
                }
                else
                {
                    break;
                }
            }
        }
        internet_address_result_iterator = internet_address_result_iterator->ai_next;
    }

    freeaddrinfo(internet_address_result);

    if (internet_socket == -1)
    {
        fprintf(stderr, "socket: no valid socket address found\n");
        exit(2);
    }

    return internet_socket;
}

int connection(int internet_socket)
{
    struct sockaddr_storage client_internet_address;
    socklen_t client_internet_address_length = sizeof client_internet_address;
    int client_socket = accept(internet_socket, (struct sockaddr *)&client_internet_address, &client_internet_address_length);
    if (client_socket == -1)
    {
        perror("accept");
        #ifdef _WIN32
            closesocket(internet_socket);
        #else
            close(internet_socket);
        #endif
        exit(3);
    }
    return client_socket;
}

void execution(int client_internet_socket, int number_to_guess)
{
    int guess;
    int guess_network_byte_order;

    do
    {
        // Send the number to guess
        guess_network_byte_order = htonl(number_to_guess);
        if (send(client_internet_socket, (const char *)&guess_network_byte_order, sizeof(guess_network_byte_order), 0) == -1)
        {
            perror("send");
            break;
        }

        // Receive the guess
        int nrOfBytes = recv(client_internet_socket, (char *)&guess_network_byte_order, sizeof(guess_network_byte_order), 0);
        if ( nrOfBytes == -1)
        {
            perror("recv");
            break;
        }
        else if( nrOfBytes == 0 )
        {
            break;
        }
        guess = ntohl(guess_network_byte_order);
        printf(" %d vs %d \n", guess, number_to_guess);
        
        // Process the guess
        if (guess < number_to_guess)
        {
            const char* message = "Higher";
            if (send(client_internet_socket, message, strlen(message), 0) == -1)
            {
                perror("send");
                break;
            }
        }
        else if (guess > number_to_guess)
        {
            const char* message = "Lower";
            if (send(client_internet_socket, message, strlen(message), 0) == -1)
            {
                perror("send");
                break;
            }
        }
        else
        {
            const char* message = "Correct! You guessed the number.";
            if (send(client_internet_socket, message, strlen(message), 0) == -1)
            {
                perror("send");
                break;
            }
            break; // Exit the loop when correct guess is made
        }

    } while (1);
}

// Function to generate a random number between min and max (inclusive)
int generateRandomNumber(int min, int max) {
    srand(time(NULL)); // Seed the random number generator with current time
    return min + rand() % (max - min + 1);
}

void cleanup(int internet_socket, int client_internet_socket)
{
    #ifdef _WIN32
        closesocket(client_internet_socket);
        closesocket(internet_socket);
    #else
        close(client_internet_socket);
        close(internet_socket);
    #endif
}
